"Manpage for unique shell
."Created by Percy Namba and Michael Owusu

.TH UNISHELL 1 "May 27 2023" "Unique Shell man page"

.SH NAME
unishell\fR - unique UNIX command interpreter

.SH SYNOPSIS
unishell\fR [\fIfilename\fR]

.SH COPYRIGHT
unishell is Copyright (C) 2023 by Percy Namba and Michael Owusu

.SH DESCRIPTION
Unishell\fR is a distinct sh-compatible command language interpreter that executes commands read from the standard input or from a file.

.SH ARGUMENTS
If there are remaining arguments after option processing, the first argument is assumed to be the name of a file containing shell commands. Unishell reads and executes commands from this file, then exits. The exit status of Unishell is determined by the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. Initially, the shell attempts to open the file in the current directory. If no file is found, the shell searches the directories in PATH for the script.

.SH INVOCATION
Unishell is launched with the standard input connected to the terminal (as determined by \fIisatty(3)\fR). If executed interactively, it enters the interactive mode. Non-interactively, it can be executed with options.
When Unishell is executed interactively, the prompt is displayed as \fI^-^ \fR to input any command. Command line arguments are invoked and treated as the first argument.

.SH DEFINITIONS
The following definitions are applicable throughout the rest of this document.

\fIblank\fR
A space or tab character.

\fIword\fR
A sequence of characters considered as a single unit by the shell. It is also known as a token.

\fIname\fR
A word consisting only of alphanumeric characters and underscores, beginning with an alphabetic character or an underscore. It is also referred to as an identifier.

\fIcontrol operator\fR
A token that performs a control function. It can be one of the following symbols: || & && ; ;;

.SH Command Execution
After a command has been split into words and if it results in a simple command and an optional list of arguments, the following actions are taken.

If the command name does not contain any slashes, the shell attempts to locate it. If there exists a shell function with that name, the function is invoked. If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, the builtin is invoked.

If the name is neither a shell function nor a builtin, and does not contain any slashes, \fIUnishell\fR searches each element of the \fIPATH\fR for a directory containing an executable file with that name. \fIUnishell\fR uses a hash table to remember the full pathnames of executable files. A full search of the directories in \fIPATH\fR is performed only if the command is not found in the hash table. If the search is unsuccessful, the shell searches for a defined shell function named "command not found". If the function exists, it is invoked with the original command and its arguments, and the function's exit status becomes the exit status of the shell. If that function is not defined, the shell prints an error message and returns an exit status of 127.

If the search is successful or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the given name, and the remaining arguments are set to the provided arguments, if any.

.SH Environment
\fIUnishell\fR takes a copy of the parent process's \fIBash\fR environment where it was executed. The environment is an array of strings containing variables in the format "name=value". When a program is invoked, it is given an array of strings called the environment. This is a list of name-value pairs.

The shell provides several ways to manipulate the environment. Upon invocation, the shell scans its own environment and creates a parameter for each name found, automatically marking it for export to child processes. Executed commands inherit the environment. The export and declare -x commands allow parameters and functions to be added to or deleted from the environment.

.SH Exit Status
The exit status of Unishell after executing a command is the value returned by the waitpid system call or an equivalent function. A command that exits with a zero exit status is considered successful. A non-zero exit status indicates failure.

If a command is not found, the child process created to execute it returns a status of 127.

All builtins return zero on success and one or two on incorrect usage (indicated by a corresponding error message).

.SH BUILTINS
The following builtin commands are supported:

.B env

Display the current environment.
.B setenv [Variable] [Value]

Create a new environment variable or modify an existing one.
.B unsetenv [Variable]

Remove an environmental variable.
.B exit [Status]

Exit the shell.
.B cd [Directory]

Change the current directory of the process to DIRECTORY. If no argument is given, the command is interpreted as "cd $HOME". If the argument is "-", the command is interpreted as "cd $OLDPWD". The environment variables PWD and OLDPWD are updated after a directory change.
.B help

Print help message for a builtin command.
.SH SEE ALSO
access(2), chdir(2), execve(2), _exit(2), exit(3), fflush(3), fork(2), free(3), isatty(3), getcwd(3), malloc(3), open(2), read(2), sh(1), signal(2), stat(2), wait(2), write(2)
Unishell incorporates basic functionality from the \fBsh\fR shell. This man page is based on the man page for bash(1).

.SH AUTHORS
Percy Namba and Michael Owusu





